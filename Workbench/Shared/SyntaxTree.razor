@using Blazorise.TreeView
@using EngLang
@using EngLang.LanguageConversion
@if (CompilerError != null)
{
    <div class="alert alert-danger">
        @CompilerError
    </div>
}
<TreeView Nodes="SyntaxNodes"
          GetChildNodes="GetChildNodes"
          HasChildNodes="HasChildNodes"
          @bind-SelectedNode="selectedNode"
          @bind-ExpandedNodes="ExpandedNodes">
    <NodeContent>@GetNodeText(context)</NodeContent>
</TreeView>

@code {

    [Parameter]
    public string? SourceCode { get; set; }
    [Parameter]
    public string? Language { get; set; }

    private SyntaxNode? SyntaxNode { get; set; }

    private IEnumerable<SyntaxNode> SyntaxNodes => SyntaxNode is null ? Array.Empty<SyntaxNode>() : new[] { SyntaxNode };

    private string? CompilerError { get; set; }

    private IList<SyntaxNode> ExpandedNodes = new List<SyntaxNode>();
    private SyntaxNode selectedNode;

    private static IEnumerable<SyntaxNode> GetChildNodes(SyntaxNode node)
    {
        return node.Children;
    }

    private static bool HasChildNodes(SyntaxNode node)
    {
        return GetChildNodes(node).Any();
    }

    private static string GetNodeText(SyntaxNode node)
    {
        var typeName = node.GetType().Name;
        return node switch
        {
            IdentifierReference ir => typeName + "(" + ir.Name + ")",
            IntLiteralExpression ile => typeName + "(" + ile.Value + ")",
            LabeledStatement ls => typeName + "(" + ls.Marker + ")",
            LogicalExpression le => typeName + "(" + le.Operator + ")",
            MathExpression me => typeName + "(" + me.Operator + ")",
            StringLiteralExpression sle => typeName + "(" + sle.Value + ")",
            VariableDeclaration vd => typeName + "(" + vd.Name + ")",
            _ => typeName,
        };
    }

    protected override void OnParametersSet()
    {
        try
        {
            CompilerError = null;
            if (SourceCode == null)
            {
                SyntaxNode = null;
                return;
            }

            SyntaxNode = EngLangParser.Parse(SourceCode);
        }
        catch (Exception ex)
        {
            CompilerError = ex.ToString();
        }
    }
}
