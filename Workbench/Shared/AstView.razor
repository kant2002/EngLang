@using Blazorise.TreeView
@using EngLang
@using EngLang.LanguageConversion
<TreeView Nodes="SyntaxNodes"
          GetChildNodes="GetChildNodes"
          HasChildNodes="HasChildNodes"
          @bind-SelectedNode="selectedNode"
          @bind-ExpandedNodes="ExpandedNodes">
    <NodeContent>@GetNodeText(context)</NodeContent>
</TreeView>

@code {
    [Parameter, EditorRequired]
    public IEnumerable<SyntaxNode> SyntaxNodes { get; set; } = null!;

    private string? CompilerError { get; set; }

    private IList<SyntaxNode> ExpandedNodes = new List<SyntaxNode>();
    private SyntaxNode selectedNode = null!;

    private static IEnumerable<SyntaxNode> GetChildNodes(SyntaxNode node)
    {
        return node.Children;
    }

    private static bool HasChildNodes(SyntaxNode node)
    {
        return GetChildNodes(node).Any();
    }

    private static string GetNodeText(SyntaxNode node)
    {
        var typeName = node.GetType().Name;
        return node switch
        {
            IdentifierReference ir => typeName + "(" + ir.Name + ")",
            TypeIdentifierReference ir => typeName + "(" + ir.Name + ")",
            IntLiteralExpression ile => typeName + "(" + ile.Value + ")",
            LabeledStatement ls => typeName + "(" + ls.Marker + ")(" + string.Join(", ", ls.Parameters.Select(GetNodeText)) + ")",
            LogicalExpression le => typeName + "(" + le.Operator + ")",
            MathExpression me => typeName + "(" + me.Operator + ")",
            StringLiteralExpression sle => typeName + "(" + sle.Value + ")",
            VariableDeclaration vd => typeName + "(" + vd.Name + ")",
            InvokableLabel il => typeName + "(" + string.Join(", ", il.Markers) + ")",
            InvocationStatement ist => typeName + "(" + ist.Marker + ")",
            InvalidStatement invalidStatement => typeName + "(" + string.Join(" ", invalidStatement.Tokens.Select(t => t.Text)) + ")",
            PointerDeclarationStatement pointerDeclarationStatement => GetNodeText(pointerDeclarationStatement.BaseType) + " -> " + GetNodeText(pointerDeclarationStatement.PointerType.Name),
            ConstantDeclarationStatement constantDeclarationStatement => GetNodeText(constantDeclarationStatement.Identifier) + " -> " + GetNodeText(constantDeclarationStatement.Value),
            SymbolName sn => typeName + "(" + sn.Name + ")",
            _ => typeName,
        };
    }
}
