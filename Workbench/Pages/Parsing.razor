@page "/parsing"
@using EngLang
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>Sentence parsing</PageTitle>

<InputFile OnChange="@SingleUpload" />
<div class="row">
    <div class="col-6">
        @((MarkupString)Content)
    </div>
    <div class="col-6">
        <h1>Variables</h1>
        <ul>
            @foreach (var v in variables.Values)
            {
                <li>
                    @v.Name

                    @if (v.Type is not null)
                    {
                        <text> : @v.Type</text>
                    }

                    @if (v.DefaultValue is not null)
                    {
                        <text> = @v.DefaultValue</text>
                    }
                </li>
            }
        </ul>
        <h1>Types</h1>
        <ul>
            @foreach (var v in types.Values)
            {
                <li>
                    @v.Name

                    @if (v.Parameters.Length != 0)
                    {
                        <text>(@(string.Join(", ", v.Parameters.Select(_ => $"{_.Name}: {_.Type}")))</text>
                    }
                </li>
            }
        </ul>
        <h1>Functions</h1>
        <ul>
            @{
                var baseUrl = new Uri(navigationManager.Uri, UriKind.Absolute)
                    .GetComponents(UriComponents.HttpRequestUrl, UriFormat.Unescaped);
            }
            @foreach (var v in functions.Values)
            {
                <li>
                    <a href="@baseUrl#@Uri.EscapeDataString(v.Template)" @onclick=@(() => ScrollToId(v.Template))>
                        @v.Template
                        @if (v.Parameters.Length != 0)
                        {
                            <text>(@(string.Join(", ", v.Parameters)))</text>
                        }
                    </a>
                </li>
            }
        </ul>
    </div>
</div>

@code {

    string Content = "";
    Dictionary<string, VariableInformation> variables = new();
    Dictionary<string, TypeInformation> types = new();
    Dictionary<string, FunctionInformation> functions = new();

    protected override void OnInitialized()
    {
        navigationManager.LocationChanged += OnLocationChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await ScrollToFragment();
    }

    public void Dispose()
    {
        navigationManager.LocationChanged -= OnLocationChanged;
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        await ScrollToFragment();
    }

    private async Task ScrollToFragment()
    {
        var uri = new Uri(navigationManager.Uri, UriKind.Absolute);
        var fragment = uri.Fragment;
        if (fragment.StartsWith('#'))
        {
            // Handle text fragment (https://example.org/#test:~:text=foo)
            // https://github.com/WICG/scroll-to-text-fragment/
            var elementId = fragment.Substring(1);
            var index = elementId.IndexOf(":~:", StringComparison.Ordinal);
            if (index > 0)
            {
                elementId = elementId.Substring(0, index);
            }

            if (!string.IsNullOrEmpty(elementId))
            {
                await ScrollToId(elementId);
            }
        }
    }

    private async Task ScrollToId(string elementId)
    {
        await JSRuntime.InvokeVoidAsync("ScrollToId", elementId);
    }

    private async Task SingleUpload(InputFileChangeEventArgs e)
    {
        MemoryStream ms = new MemoryStream();
        await e.File.OpenReadStream().CopyToAsync(ms);
        var bytes = ms.ToArray();
        variables.Clear();
        functions.Clear();
        types.Clear();
        Content = ParseText(System.Text.Encoding.UTF8.GetString(bytes));
        //do something with bytes
    }

    private string ParseText(string text)
    {
        var paragraphs = text.Split("\r\n\r\n");
        return string.Join("", paragraphs.Select(ParseParagraph));
    }

    private string ParseParagraph(string text)
    {
        if (text.StartsWith("the ") || text.StartsWith("The "))
        {
            var code = string.Join("\r\n", text.Split("\r\n").Where(_ => !_.Trim().StartsWith("\\"))).Trim().TrimEnd('.');
            var variableName = code.Replace("the ", "");
            var parts = variableName.Split(" is ", 2);
            if (parts.Length == 1)
            {
                parts = variableName.Split(" are ", 2);
            }

            variableName = parts[0];
            var typeName = parts.ElementAtOrDefault(1);
            string? defaultValue = null;
            if (typeName is not null)
            {
                parts = typeName.Replace("a ", "").Replace("an ", "").Split(" equal to ", 2);
                typeName = parts[0];
                defaultValue = parts.ElementAtOrDefault(1);
            }

            var parser = new StupidEngLangParser(text);
            var paragraph = parser.ParseParagraph();
            System.Diagnostics.Debug.Assert(paragraph.IsOk);
            var varDeclarationStatement = (VariableDeclarationStatement)paragraph.Ok.Value.Statements[0];
            var declaration = varDeclarationStatement.Declaration;
            System.Diagnostics.Debug.Assert(declaration.Name == variableName && declaration.TypeName.Name == typeName);
            variables.Add(variableName, new(variableName, typeName, defaultValue));
        }

        if (text.StartsWith("an ") || text.StartsWith("An ") || text.StartsWith("a ") || text.StartsWith("A "))
        {
            var parser = new StupidEngLangParser(text);
            var paragraph = parser.ParseParagraph();
            System.Diagnostics.Debug.Assert(paragraph.IsOk);
            var shapeDeclarationStatement = (ShapeDeclarationStatement)paragraph.Ok.Value.Statements[0];
            types.Add(text, new(text, Array.Empty<VariableInformation>()));
        }

        var lines = text.Split("\r\n");
        return $"<pre>{string.Join("\r\n", lines.Select(MarkFunctionHeader).Select(MarkComments))}</pre>";

        string MarkFunctionHeader(string text)
        {
            var (code, comment) = ParseComments(text);
            var toStartPosition = code.IndexOf("to", StringComparison.InvariantCultureIgnoreCase);
            if (toStartPosition != 0) return code;
            var lineEndPosition = code.IndexOf("\r\n", StringComparison.InvariantCultureIgnoreCase);
            string name;
            string leftover;
            if (lineEndPosition == -1)
            {
                name = code;
                leftover = "";
            }
            else
            {
                name = code[0..lineEndPosition];
                leftover = code[lineEndPosition..];
            }

            functions.Add(name, new FunctionInformation(name, Array.Empty<string>()));
            return $"<a name='{name}'></a><span class='englang-function-declaration'>{name}</span>{comment}{leftover}";
        }

        string MarkComments(string text)
        {
            var commentStartPosition = text.IndexOf("\\");
            if (commentStartPosition == -1) return text;
            return $"{text[0..commentStartPosition]}<span class='englang-comments'>{text[commentStartPosition..]}</span>";
        }

        (string, string?) ParseComments(string text)
        {
            var commentStartPosition = text.IndexOf("\\");
            if (commentStartPosition == -1) return (text, null);
            return (text[0..commentStartPosition], text[commentStartPosition..]);
        }
    }

    record VariableInformation(string Name, string? Type, string? DefaultValue);
    record FunctionInformation(string Template, string[] Parameters);
    record TypeInformation(string Name, VariableInformation[] Parameters);
}
